{
  "info": {
    "title": "3Commas Public API",
    "version": "0.0.1"
  },
  "swagger": "2.0",
  "produces": [
    "application/json"
  ],
  "host": "api.3commas.io",
  "basePath": "/public/api",
  "tags": [
    {
      "name": "bots",
      "description": "Operations about bots"
    },
    {
      "name": "deals",
      "description": "Operations about deals"
    },
    {
      "name": "accounts",
      "description": "Operations about accounts"
    },
    {
      "name": "users",
      "description": "Operations about users"
    },
    {
      "name": "marketplace",
      "description": "Operations about marketplaces"
    },
    {
      "name": "grid_bots",
      "description": "Operations about grid_bots"
    },
    {
      "name": "loose_accounts",
      "description": "Operations about loose_accounts"
    },
    {
      "name": "mini_apps",
      "description": "Operations about mini_apps"
    },
    {
      "name": "portfolios",
      "description": "Operations about portfolios"
    },
    {
      "name": "ping",
      "description": "Operations about pings"
    },
    {
      "name": "time",
      "description": "Operations about times"
    },
    {
      "name": "general_validate",
      "description": "Operations about general_validates"
    },
    {
      "name": "smart_trades_v2",
      "description": "Operations about smart_trades_v2s"
    },
    {
      "name": "accounts",
      "description": "Operations about accounts"
    }
  ],
  "paths": {
    "/ver1/bots/account_trade_info_smart_sell": {
      "get": {
        "description": "Smart Sell Account Table Info (Permission: NONE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Smart Sell Account Table Info (Permission: NONE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1BotsAccountTradeInfoSmartSell"
      }
    },
    "/ver1/bots/account_trade_info": {
      "get": {
        "description": "Account Trade Info (Permission: NONE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Account Trade Info (Permission: NONE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1BotsAccountTradeInfo"
      }
    },
    "/ver1/bots/strategy_list": {
      "get": {
        "description": "Available strategy list for bot (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "account_id",
            "description": "id from GET /ver1/accounts",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "type": "string",
            "enum": [
              "simple",
              "composite"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "strategy",
            "type": "string",
            "enum": [
              "long",
              "short"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Available strategy list for bot (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1BotsStrategyList"
      }
    },
    "/ver1/bots/pairs_black_list": {
      "get": {
        "description": "Black List for bot pairs (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Black List for bot pairs (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1BotsPairsBlackList"
      }
    },
    "/ver1/bots/update_pairs_black_list": {
      "post": {
        "description": "Create or Update pairs BlackList for bots (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "pairs",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Create or Update pairs BlackList for bots (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "postVer1BotsUpdatePairsBlackList"
      }
    },
    "/ver1/bots/create_bot": {
      "post": {
        "description": "Create bot (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "account_id",
            "description": "id from GET /ver1/accounts",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "pairs",
            "description": "Pass single pair to create SingleBot or any other number of pairs to create MultiBot",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "max_active_deals",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "formData",
            "name": "base_order_volume",
            "description": "Base order size",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "base_order_volume_type",
            "description": "base order volume currency",
            "type": "string",
            "enum": [
              "quote_currency",
              "base_currency",
              "percent",
              "xbt"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "take_profit",
            "description": "Target profit(percentage)",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "take_profit_steps",
            "description": "Take profit steps <br>[{\"amount_percentage\": 10, \"profit_percentage\": 10}, <br>{\"amount_percentage\": 20, \"profit_percentage\": 15}, <br>{\"amount_percentage\": 30, \"profit_percentage\": 20}, <br>{\"amount_percentage\": 40, \"profit_percentage\": 23}]",
            "type": "array",
            "items": {
              "type": "json"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "safety_order_volume",
            "description": "Safety trade size",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "safety_order_volume_type",
            "description": "safety order volume currency",
            "type": "string",
            "enum": [
              "quote_currency",
              "base_currency",
              "percent",
              "xbt"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "martingale_volume_coefficient",
            "type": "number",
            "format": "double",
            "default": 1,
            "required": true
          },
          {
            "in": "formData",
            "name": "martingale_step_coefficient",
            "type": "number",
            "format": "double",
            "default": 1,
            "required": true
          },
          {
            "in": "formData",
            "name": "max_safety_orders",
            "description": "Max safety trades count",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "active_safety_orders_count",
            "description": "Max active safety trades count",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss_percentage",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "cooldown",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_enabled",
            "description": "Enable trailing take profit. Binance only.",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_deviation",
            "description": "required if trailing_enabled",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "btc_price_limit",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "strategy",
            "type": "string",
            "default": "long",
            "enum": [
              "short",
              "long"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "safety_order_step_percentage",
            "description": "Price deviation to open safety trades(percentage)",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "take_profit_type",
            "description": "Percentage: base – from base order, total – from total volume",
            "type": "string",
            "default": "base",
            "enum": [
              "base",
              "total"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "strategy_list",
            "description": "For manual signals: [{\"strategy\":\"manual\"}] or []<br>For non-stop(1 pair only): [{\"strategy\":\"nonstop\", \"options\": {}]<br>QFL: [{\"options\": {\"type\": \"original\"}, {\"percent\": 3}, \"strategy\": \"qfl\"}] <br>TradingView: [{\"options\": {\"time\": \"5m\", \"type\": \"buy_or_strong_buy\"}, \"strategy\": \"trading_view\"}] <br>RSI: [{\"options\": {\"time\": \"5m\", \"points\": 30, \"trigger_condition\": \"less\", \"time_period\": 7}, \"strategy\": \"rsi\"}]",
            "type": "array",
            "items": {
              "type": "json"
            },
            "required": true
          },
          {
            "in": "formData",
            "name": "leverage_type",
            "description": "Used for Bitmex bots only",
            "type": "string",
            "default": "not_specified",
            "enum": [
              "custom",
              "cross",
              "not_specified",
              "isolated"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "leverage_custom_value",
            "description": "required if leverage_type is isolated",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_price",
            "description": "minimum price to open deal",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "max_price",
            "description": "maximum price to open deal",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_timeout_enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_timeout_in_seconds",
            "description": "StopLoss timeout in seconds if StopLoss timeout enabled",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_volume_btc_24h",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "tsl_enabled",
            "description": "Enable trailing stop loss. Bitmex only.",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "deal_start_delay_seconds",
            "description": "Deal start delay in seconds",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "profit_currency",
            "description": "Take profit currency",
            "type": "string",
            "enum": [
              "quote_currency",
              "base_currency"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "start_order_type",
            "type": "string",
            "enum": [
              "limit",
              "market"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_type",
            "type": "string",
            "enum": [
              "stop_loss",
              "stop_loss_and_disable_bot"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "disable_after_deals_count",
            "description": "Bot will be disabled after opening this number of deals",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "allowed_deals_on_same_pair",
            "description": "Allow specific number of deals on the same pair. Multibot only.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "close_deals_timeout",
            "description": "Close bot deals after given number of seconds. Must be greater than 60.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_profit_percentage",
            "description": "Min profit to activate close strategy",
            "type": "number",
            "format": "float",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_profit_type",
            "description": "Percentage: base_order_volume  – from base order, total_bought_volume – from total volume",
            "type": "string",
            "enum": [
              "base_order_volume",
              "total_bought_volume"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "close_strategy_list",
            "description": "For manual signals: [{\"strategy\":\"manual\"}] or []<br>For non-stop(1 pair only): [{\"strategy\":\"nonstop\", \"options\": {}]<br>QFL: [{\"options\": {\"type\": \"original\"}, {\"percent\": 3}, \"strategy\": \"qfl\"}] <br>TradingView: [{\"options\": {\"time\": \"5m\", \"type\": \"buy_or_strong_buy\"}, \"strategy\": \"trading_view\"}] <br>RSI: [{\"options\": {\"time\": \"5m\", \"points\": 30, \"trigger_condition\": \"less\", \"time_period\": 7}, \"strategy\": \"rsi\"}]",
            "type": "array",
            "items": {
              "type": "json"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "risk_reduction_percentage",
            "description": "Risk reduction percentage",
            "type": "number",
            "format": "float",
            "required": false
          },
          {
            "in": "formData",
            "name": "reinvesting_percentage",
            "description": "Reinvesting percentage",
            "type": "number",
            "format": "float",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_price_percentage",
            "description": "Min price percent. Must be greater then -95 and lower then 1000",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "max_price_percentage",
            "description": "Max price percent. Must be greater then -95 and lower then 1000",
            "type": "number",
            "format": "double",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Create bot (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "postVer1BotsCreateBot"
      }
    },
    "/ver1/bots": {
      "get": {
        "description": "User bots (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit records. Max: 100",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset records",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "Param for a filter by created date",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "account_id",
            "description": "Account to show bots on. Return all if not specified. Gather this from GET /ver1/accounts",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "scope",
            "type": "string",
            "default": null,
            "enum": [
              "enabled",
              "disabled"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "strategy",
            "type": "string",
            "default": null,
            "enum": [
              "long",
              "short"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_by",
            "type": "string",
            "default": "created_at",
            "enum": [
              "profit",
              "created_at",
              "updated_at"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "quote",
            "description": "Quote currency",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "form_type",
            "description": "Param for a filter by bot form type (gordon/advanced)",
            "type": "string",
            "enum": [
              "gordon",
              "advanced"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "User bots (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1Bots"
      }
    },
    "/ver1/bots/stats_by_date": {
      "get": {
        "description": "Get bot stats by date (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "type": "string",
            "format": "date",
            "required": true
          },
          {
            "in": "query",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get bot stats by date (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1BotsStatsByDate"
      }
    },
    "/ver1/bots/stats": {
      "get": {
        "description": "Get bot stats (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "account_id",
            "description": "Account to show on. Null - show for all. Gather this from GET /ver1/accounts",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "bot_id",
            "description": "Bots to show on. Null - show for all",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get bot stats (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1BotsStats"
      }
    },
    "/ver1/bots/{id}/profit_by_day": {
      "get": {
        "description": "Get bot profits grouped by day (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "days",
            "type": "integer",
            "format": "int32",
            "default": 30,
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get bot profits grouped by day (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1BotsIdProfitByDay"
      }
    },
    "/ver1/bots/{bot_id}/copy_and_create": {
      "post": {
        "description": "POST /bots/:id/copy_and_create. Permission: BOTS_WRITE, Security: SIGNED",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "secret",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "amount",
            "description": "Max amount for bot usage (Based on current rate)",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "POST /bots/:id/copy_and_create. Permission: BOTS_WRITE, Security: SIGNED"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "postVer1BotsBotIdCopyAndCreate"
      }
    },
    "/ver1/bots/{bot_id}/update": {
      "patch": {
        "description": "Edit bot (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "pairs",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "max_active_deals",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "formData",
            "name": "base_order_volume",
            "description": "Base order size",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "base_order_volume_type",
            "description": "base order volume currency",
            "type": "string",
            "enum": [
              "quote_currency",
              "base_currency",
              "percent",
              "xbt"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "take_profit",
            "description": "Target profit(percentage)",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "take_profit_steps",
            "description": "Take profit steps <br>[{\"amount_percentage\": 10, \"profit_percentage\": 10}, <br>{\"amount_percentage\": 20, \"profit_percentage\": 15}, <br>{\"amount_percentage\": 30, \"profit_percentage\": 20}, <br>{\"amount_percentage\": 40, \"profit_percentage\": 23}]",
            "type": "array",
            "items": {
              "type": "json"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "safety_order_volume",
            "description": "Safety trade size",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "safety_order_volume_type",
            "description": "safety order volume currency",
            "type": "string",
            "enum": [
              "quote_currency",
              "base_currency",
              "percent",
              "xbt"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "martingale_volume_coefficient",
            "type": "number",
            "format": "double",
            "default": 1,
            "required": true
          },
          {
            "in": "formData",
            "name": "martingale_step_coefficient",
            "type": "number",
            "format": "double",
            "default": 1,
            "required": true
          },
          {
            "in": "formData",
            "name": "max_safety_orders",
            "description": "Max safety trades count",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "active_safety_orders_count",
            "description": "Max active safety trades count",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss_percentage",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "cooldown",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_enabled",
            "description": "Enable trailing take profit. Binance only.",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_deviation",
            "description": "required if trailing_enabled",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "btc_price_limit",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "safety_order_step_percentage",
            "description": "Price deviation to open safety trades(percentage)",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "take_profit_type",
            "description": "Percentage: base – from base order, total – from total volume",
            "type": "string",
            "default": "total",
            "enum": [
              "total",
              "base"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "strategy_list",
            "description": "For manual signals: [{\"strategy\":\"manual\"}] or []<br>For non-stop(1 pair only): [{\"strategy\":\"nonstop\", \"options\": {}}]<br>QFL: [{\"options\": {\"type\": \"original\"}, {\"percent\": 3}, \"strategy\": \"qfl\"}] <br>TradingView: [{\"options\": {\"time\": \"5m\", \"type\": \"buy_or_strong_buy\"}, \"strategy\": \"trading_view\"}] <br>RSI: [{\"options\": {\"time\": \"5m\", \"points\": 30, \"trigger_condition\": \"less\", \"time_period\": 7}, \"strategy\": \"rsi\"}]",
            "type": "array",
            "items": {
              "type": "json"
            },
            "required": true
          },
          {
            "in": "formData",
            "name": "leverage_type",
            "description": "Used for Bitmex bots only",
            "type": "string",
            "default": "not_specified",
            "enum": [
              "custom",
              "cross",
              "not_specified",
              "isolated"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "leverage_custom_value",
            "description": "required if leverage_type is isolated",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_price",
            "description": "minimum price to open deal",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "max_price",
            "description": "maximum price to open deal",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_timeout_enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_timeout_in_seconds",
            "description": "StopLoss timeout in seconds if StopLoss timeout enabled",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_volume_btc_24h",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "tsl_enabled",
            "description": "Enable trailing stop loss. Bitmex only.",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "deal_start_delay_seconds",
            "description": "Deal start delay in seconds",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "profit_currency",
            "description": "Take profit currency",
            "type": "string",
            "enum": [
              "quote_currency",
              "base_currency"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "start_order_type",
            "type": "string",
            "enum": [
              "limit",
              "market"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_type",
            "type": "string",
            "enum": [
              "stop_loss",
              "stop_loss_and_disable_bot"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "disable_after_deals_count",
            "description": "Bot will be disabled after opening this number of deals",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "allowed_deals_on_same_pair",
            "description": "Allow specific number of deals on the same pair. Multibot only.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "close_deals_timeout",
            "description": "Close bot deals after given number of seconds. Must be greater than 60.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_profit_percentage",
            "description": "Min profit to activate close strategy",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_profit_type",
            "description": "Percentage: base_order_volume  – from base order, total_bought_volume – from total volume",
            "type": "string",
            "enum": [
              "base_order_volume",
              "total_bought_volume"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "close_strategy_list",
            "description": "For manual signals: [{\"strategy\":\"manual\"}] or []<br>For non-stop(1 pair only): [{\"strategy\":\"nonstop\", \"options\": {}}]<br>QFL: [{\"options\": {\"type\": \"original\"}, {\"percent\": 3}, \"strategy\": \"qfl\"}] <br>TradingView: [{\"options\": {\"time\": \"5m\", \"type\": \"buy_or_strong_buy\"}, \"strategy\": \"trading_view\"}] <br>RSI: [{\"options\": {\"time\": \"5m\", \"points\": 30, \"trigger_condition\": \"less\", \"time_period\": 7}, \"strategy\": \"rsi\"}]",
            "type": "array",
            "items": {
              "type": "json"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "risk_reduction_percentage",
            "description": "Risk reduction percentage",
            "type": "number",
            "format": "float",
            "required": false
          },
          {
            "in": "formData",
            "name": "reinvesting_percentage",
            "description": "Reinvesting percentage",
            "type": "number",
            "format": "float",
            "required": false
          },
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Edit bot (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "patchVer1BotsBotIdUpdate"
      }
    },
    "/ver1/bots/{bot_id}/disable": {
      "post": {
        "description": "Disable bot (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Disable bot (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "postVer1BotsBotIdDisable"
      }
    },
    "/ver1/bots/{bot_id}/enable": {
      "post": {
        "description": "Enable bot (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Enable bot (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "postVer1BotsBotIdEnable"
      }
    },
    "/ver1/bots/{bot_id}/start_new_deal": {
      "post": {
        "description": "Start new deal asap (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "pair",
            "description": "Can be omited for simple bot",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "skip_signal_checks",
            "description": "If false or not specified then all paramaters like signals or volume filters will be checked. If true - those checks will be skipped",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "skip_open_deals_checks",
            "description": "If true then you will be allowed to open more then one deal per pair in composite bot",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "only_for_enabled",
            "description": "If set true and bot disabled will return error(422 code), if false and bot disabled then enable it",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Start new deal asap (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "postVer1BotsBotIdStartNewDeal"
      }
    },
    "/ver1/bots/{bot_id}/delete": {
      "post": {
        "description": "Delete bot (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Delete bot (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "postVer1BotsBotIdDelete"
      }
    },
    "/ver1/bots/{bot_id}/panic_sell_all_deals": {
      "post": {
        "description": "Panic sell all bot deals (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Panic sell all bot deals (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "postVer1BotsBotIdPanicSellAllDeals"
      }
    },
    "/ver1/bots/{bot_id}/cancel_all_deals": {
      "post": {
        "description": "Cancel all bot deals (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel all bot deals (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "postVer1BotsBotIdCancelAllDeals"
      }
    },
    "/ver1/bots/{bot_id}/deals_stats": {
      "get": {
        "description": "Bot deals stats (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Bot deals stats (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1BotsBotIdDealsStats"
      }
    },
    "/ver1/bots/{bot_id}/show": {
      "get": {
        "description": "Bot info (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "include_events",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "path",
            "name": "bot_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Bot info (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "bots"
        ],
        "operationId": "getVer1BotsBotIdShow"
      }
    },
    "/ver1/deals": {
      "get": {
        "description": "User deals (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit records. Max: 1_000",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset records",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "Param for a filter by created date",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "Param for a filter by created date",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "account_id",
            "description": "Account to show bots on. Return all if not specified. Gather this from GET /ver1/accounts",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "bot_id",
            "description": "Bot show deals on. Return all if not specified",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "scope",
            "description": "active - active deals, finished - finished deals, completed - successfully completed, cancelled - cancelled deals, failed - failed deals, any other value or null (default) - all deals",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at",
              "closed_at",
              "profit",
              "profit_percentage"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "base",
            "description": "Base currency",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "quote",
            "description": "Quote currency",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "note",
            "description": "Note",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "User deals (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "getVer1Deals"
      }
    },
    "/ver1/deals/{deal_id}/convert_to_smart_trade": {
      "post": {
        "description": "Convert to smart trade (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "stop_bot",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Convert to smart trade (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "postVer1DealsDealIdConvertToSmartTrade"
      }
    },
    "/ver1/deals/{deal_id}/update_max_safety_orders": {
      "post": {
        "description": "Update max safety orders (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "max_safety_orders",
            "description": "New maximum safety orders value",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Update max safety orders (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "postVer1DealsDealIdUpdateMaxSafetyOrders"
      }
    },
    "/ver1/deals/{deal_id}/panic_sell_step": {
      "post": {
        "description": "Panic sell one step in deal (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "trade_id",
            "description": "ID of the trade that should be sold. Gather this from GET /ver1/deals/:id/show",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Panic sell one step in deal (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "postVer1DealsDealIdPanicSellStep"
      }
    },
    "/ver1/deals/{deal_id}/panic_sell": {
      "post": {
        "description": "Panic sell deal (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Panic sell deal (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "postVer1DealsDealIdPanicSell"
      }
    },
    "/ver1/deals/{deal_id}/cancel": {
      "post": {
        "description": "Cancel deal (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel deal (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "postVer1DealsDealIdCancel"
      }
    },
    "/ver1/deals/{deal_id}/update_deal": {
      "patch": {
        "description": "Update deal (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "take_profit",
            "description": "New take profit value",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "take_profit_steps",
            "description": "Take profit steps <br>[{\"id\": 1, \"amount_percentage\": 10, \"profit_percentage\": 10}, <br>{\"id\": 2, \"amount_percentage\": 20, \"profit_percentage\": 15}, <br>{\"id\": 3, \"amount_percentage\": 30, \"profit_percentage\": 20}, <br>{\"id\": 4, \"amount_percentage\": 40, \"profit_percentage\": 23}]",
            "type": "array",
            "items": {
              "type": "json"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "profit_currency",
            "type": "string",
            "enum": [
              "quote_currency",
              "base_currency"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "take_profit_type",
            "description": "base – from base order, total – from total volume",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_deviation",
            "description": "New trailing deviation value",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_percentage",
            "description": "New stop loss percentage value",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "max_safety_orders",
            "description": "New max safety orders value",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "active_safety_orders_count",
            "description": "New active safety orders count value",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_timeout_enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_timeout_in_seconds",
            "description": "StopLoss timeout in seconds if StopLoss timeout enabled",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "tsl_enabled",
            "description": "Trailing stop loss enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss_type",
            "type": "string",
            "enum": [
              "stop_loss",
              "stop_loss_and_disable_bot"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "close_timeout",
            "description": "Close deal after given number of seconds. Must be greater than 60.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "note",
            "description": "Note",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_profit_percentage",
            "description": "Minimum profit percentage",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Update deal (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "patchVer1DealsDealIdUpdateDeal"
      }
    },
    "/ver1/deals/{deal_id}/update_tp": {
      "post": {
        "description": "DEPRECATED, Update take profit condition. Deal status should be bought (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "new_take_profit_percentage",
            "description": "New take profit value",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "DEPRECATED, Update take profit condition. Deal status should be bought (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "postVer1DealsDealIdUpdateTp"
      }
    },
    "/ver1/deals/{deal_id}/show": {
      "get": {
        "description": "Info about specific deal (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Info about specific deal (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "getVer1DealsDealIdShow"
      }
    },
    "/ver1/deals/{deal_id}/cancel_order": {
      "post": {
        "description": "Cancel manual safety orders (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "order_id",
            "description": "manual safety order id",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel manual safety orders (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "postVer1DealsDealIdCancelOrder"
      }
    },
    "/ver1/deals/{deal_id}/market_orders": {
      "get": {
        "description": "Deal safety orders (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deal safety orders (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "getVer1DealsDealIdMarketOrders"
      }
    },
    "/ver1/deals/{deal_id}/add_funds": {
      "post": {
        "description": "Adding manual safety order (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "quantity",
            "description": "safety order quantity",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "is_market",
            "description": "true - use MARKET order, false - use LIMIT order",
            "type": "boolean",
            "required": true
          },
          {
            "in": "formData",
            "name": "response_type",
            "type": "string",
            "default": "empty",
            "enum": [
              "empty",
              "deal",
              "market_order"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "rate",
            "description": "safety order rate. Required if LIMIT order used",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Adding manual safety order (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "postVer1DealsDealIdAddFunds"
      }
    },
    "/ver1/deals/{deal_id}/data_for_adding_funds": {
      "get": {
        "description": "Info required to add funds correctly: available amounts, exchange limitations etc (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deal_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Info required to add funds correctly: available amounts, exchange limitations etc (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "deals"
        ],
        "operationId": "getVer1DealsDealIdDataForAddingFunds"
      }
    },
    "/ver1/accounts/types_to_connect": {
      "get": {
        "description": "Available market subtypes to connect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "description": "check market_code in market_list method",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "description": "Account name (any string)",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "description": "API key for binance/ftx/bybit/gateio account",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "secret",
            "description": "Secret for binance/ftx/bybit/gateio account",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Available market subtypes to connect"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsTypesToConnect"
      }
    },
    "/ver1/accounts/transfer": {
      "post": {
        "description": "Transfer coins between accounts (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "currency",
            "description": "Currency code(example: USDT)",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "amount",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "to_account_id",
            "description": "Recipient account ID (possible values in /transfer_data)",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "from_account_id",
            "description": "Sender account ID (possible values in /transfer_data)",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Transfer coins between accounts (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsTransfer"
      }
    },
    "/ver1/accounts/transfer_history": {
      "get": {
        "description": "Transfers history (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "account_id",
            "description": "Sender or Recipient account ID (possible values in /transfer_data)",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Currency code(example: USDT)",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "Start time timestamp (example: 1665560898)",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Elements per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Transfers history (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsTransferHistory"
      }
    },
    "/ver1/accounts/transfer_data": {
      "get": {
        "description": "Data for transfer between accounts (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Data for transfer between accounts (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsTransferData"
      }
    },
    "/ver1/accounts/new": {
      "post": {
        "description": "Add exchange account  (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "type",
            "description": "check market_code in market_list method",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "name",
            "description": "Account name (any string)",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "api_key",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "secret",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Requires if type = ethereumwallet",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "customer_id",
            "description": "For Bitstamp",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "passphrase",
            "description": "For Coinbase Pro (GDAX)",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "subaccount_name",
            "description": "For FTX",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "types_to_create",
            "description": "Array of related account types to be created. For example ['binance_margin']",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Add exchange account  (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsNew"
      }
    },
    "/ver1/accounts/update": {
      "post": {
        "description": "Edit exchange account",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "name",
            "description": "Account name (any string)",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "api_key",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "secret",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "customer_id",
            "description": "For Bitstamp",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "passphrase",
            "description": "For Coinbase Pro (GDAX)",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "subaccount_name",
            "description": "For FTX",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "address",
            "description": "For accounts with type = ethereumwallet",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "include_in_summary",
            "description": "Should the account be included in the summary statistics?",
            "type": "boolean",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Edit exchange account"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsUpdate"
      }
    },
    "/ver1/accounts": {
      "get": {
        "description": "User connected exchanges(and EthereumWallet) list (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api_key",
            "description": "Filter by api key",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Page size, from 1 to 100",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "User connected exchanges(and EthereumWallet) list (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1Accounts"
      }
    },
    "/ver1/accounts/market_list": {
      "get": {
        "description": "Supported markets list (Permission: NONE, Security: NONE)",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Supported markets list (Permission: NONE, Security: NONE)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsMarketList"
      }
    },
    "/ver1/accounts/market_pairs": {
      "get": {
        "description": "All market pairs (Permission: NONE, Security: NONE)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pretty_display_type",
            "description": "deprecated. mandatory use market_code instead",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "market_code",
            "description": "market_code from account model",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "All market pairs (Permission: NONE, Security: NONE)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsMarketPairs"
      }
    },
    "/ver1/accounts/currency_rates_with_leverage_data": {
      "get": {
        "description": "Currency rates and limits with leverage data (Permission: NONE, Security: NONE)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "market_code",
            "description": "market_code from account model",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pair",
            "description": "Pair",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Currency rates and limits with leverage data (Permission: NONE, Security: NONE)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsCurrencyRatesWithLeverageData"
      }
    },
    "/ver1/accounts/currency_rates": {
      "get": {
        "description": "Currency rates and limits (Permission: NONE, Security: NONE)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit_type",
            "description": "Type of limits - bot or smart_trade",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pretty_display_type",
            "description": "deprecated. use market_code instead",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "market_code",
            "description": "market_code from account model. If you are retrieving data for pairs, you must also include market_code",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pair",
            "description": "Pair",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Currency rates and limits (Permission: NONE, Security: NONE)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsCurrencyRates"
      }
    },
    "/ver1/accounts/{account_id}/deposit_data": {
      "get": {
        "description": "User Deposit Data (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "currency",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "network",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User Deposit Data (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsAccountIdDepositData"
      }
    },
    "/ver1/accounts/{account_id}/networks_info": {
      "get": {
        "description": "Deposit/withdraw networks info (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "purpose",
            "description": "Filter currencies with deposit/withdraw enabled",
            "type": "string",
            "enum": [
              "deposit",
              "withdraw"
            ],
            "required": false
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit/withdraw networks info (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsAccountIdNetworksInfo"
      }
    },
    "/ver1/accounts/{account_id}/convert_dust_to_bnb": {
      "post": {
        "description": "Convert dust coins to BNB (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "codes",
            "description": "Array of currency codes",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Convert dust coins to BNB (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsAccountIdConvertDustToBnb"
      }
    },
    "/ver1/accounts/{account_id}/active_trading_entities": {
      "get": {
        "description": "Active trade entities (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Active trade entities (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsAccountIdActiveTradingEntities"
      }
    },
    "/ver1/accounts/{account_id}/sell_all_to_usd": {
      "post": {
        "description": "Sell all to USD  (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Sell all to USD  (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsAccountIdSellAllToUsd"
      }
    },
    "/ver1/accounts/{account_id}/sell_all_to_btc": {
      "post": {
        "description": "Sell all to BTC  (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Sell all to BTC  (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsAccountIdSellAllToBtc"
      }
    },
    "/ver1/accounts/{account_id}/balance_chart_data": {
      "get": {
        "description": "balance history data (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date_from",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "in": "query",
            "name": "date_to",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "balance history data (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsAccountIdBalanceChartData"
      }
    },
    "/ver1/accounts/{account_id}/load_balances": {
      "post": {
        "description": "Load balances for specified exchange  (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Load balances for specified exchange  (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsAccountIdLoadBalances"
      }
    },
    "/ver1/accounts/{account_id}/rename": {
      "post": {
        "description": "Rename exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Rename exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsAccountIdRename"
      }
    },
    "/ver1/accounts/{account_id}/pie_chart_data": {
      "post": {
        "description": "Information about all user balances on specified exchange in pretty for pie chart format (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Information about all user balances on specified exchange in pretty for pie chart format (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsAccountIdPieChartData"
      }
    },
    "/ver1/accounts/{account_id}/account_table_data": {
      "post": {
        "description": "Information about all user balances on specified exchange (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Information about all user balances on specified exchange (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsAccountIdAccountTableData"
      }
    },
    "/ver1/accounts/{account_id}/remove": {
      "post": {
        "description": "Remove exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Remove exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "postVer1AccountsAccountIdRemove"
      }
    },
    "/ver1/accounts/{account_id}/leverage_data": {
      "get": {
        "description": "Information about account leverage (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pair",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Information about account leverage (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsAccountIdLeverageData"
      }
    },
    "/ver1/accounts/{account_id}": {
      "get": {
        "description": "Single Account Info (Permission: ACCOUNTS_READ, Security: SIGNED)\nYou can send 'summary' instead of {account_id} to get summary account info",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Single Account Info (Permission: ACCOUNTS_READ, Security: SIGNED)\nYou can send 'summary' instead of {account_id} to get summary account info"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getVer1AccountsAccountId"
      }
    },
    "/ver1/users/locale": {
      "put": {
        "description": "Change user locale (Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "locale",
            "type": "string",
            "enum": [
              "ru",
              "en",
              "pt",
              "zh",
              "es",
              "fr",
              "tr",
              "de",
              "it"
            ],
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Change user locale (Security: SIGNED)"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "putVer1UsersLocale"
      }
    },
    "/ver1/users/permissions_info": {
      "get": {
        "description": "Api Key Permissions (Permission: NONE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Api Key Permissions (Permission: NONE, Security: SIGNED)"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "getVer1UsersPermissionsInfo"
      }
    },
    "/ver1/users/current_mode": {
      "get": {
        "description": "Current User Mode (Paper or Real) (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Current User Mode (Paper or Real) (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "getVer1UsersCurrentMode"
      }
    },
    "/ver1/users/change_mode": {
      "post": {
        "description": "Change User Mode (Paper or Real) (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "mode",
            "type": "string",
            "enum": [
              "paper",
              "real"
            ],
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Change User Mode (Paper or Real) (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "postVer1UsersChangeMode"
      }
    },
    "/ver1/marketplace/presets": {
      "get": {
        "description": "Marketplace presets (Permission: NONE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "profit_per_day_from",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "query",
            "name": "profit_per_day_to",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "query",
            "name": "profit_per_month_from",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "query",
            "name": "profit_per_month_to",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "account_types",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "markets",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "with_all_market_pairs",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "pairs",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "days_running_from",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "days_running_to",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "deal_start_conditions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "bot_type",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "bot_strategy",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "cmc",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "sort_by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Marketplace presets (Permission: NONE, Security: SIGNED)",
            "schema": {
              "$ref": "#/definitions/MarketplacePresets_IndexEntity"
            }
          }
        },
        "tags": [
          "marketplace"
        ],
        "operationId": "getVer1MarketplacePresets"
      }
    },
    "/ver1/marketplace/items": {
      "get": {
        "description": "All marketplace items (Permission: NONE, Security: NONE)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit records. Max: 1_000",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset records",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "scope",
            "description": "paid - show only paid signal providers. free - show only free signal providers",
            "type": "string",
            "default": "all",
            "enum": [
              "all",
              "paid",
              "free"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "type": "string",
            "default": "newest",
            "enum": [
              "subscribers",
              "name",
              "newest"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "locale",
            "type": "string",
            "default": "en",
            "enum": [
              "en",
              "ru",
              "zh",
              "zh-CN",
              "es",
              "pt",
              "ko",
              "fr",
              "cs",
              "tr",
              "de",
              "it"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "All marketplace items (Permission: NONE, Security: NONE)"
          }
        },
        "tags": [
          "marketplace"
        ],
        "operationId": "getVer1MarketplaceItems"
      }
    },
    "/ver1/marketplace/{item_id}/signals": {
      "get": {
        "description": "Marketplace Item Signals (Permission: NONE, Security: NONE)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit records. Max: 1_000",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset records",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "type": "string",
            "default": "date",
            "enum": [
              "pair",
              "exchange",
              "signal_type",
              "date"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "locale",
            "type": "string",
            "default": "en",
            "enum": [
              "en",
              "ru",
              "zh",
              "zh-CN",
              "es",
              "pt",
              "ko",
              "fr",
              "cs",
              "tr",
              "de",
              "it"
            ],
            "required": false
          },
          {
            "in": "path",
            "name": "item_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Marketplace Item Signals (Permission: NONE, Security: NONE)"
          }
        },
        "tags": [
          "marketplace"
        ],
        "operationId": "getVer1MarketplaceItemIdSignals"
      }
    },
    "/ver1/grid_bots/manual": {
      "post": {
        "description": "Create Grid Bot (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "Grid Bot's name",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "account_id",
            "description": "id from GET /ver1/accounts",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "pair",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "upper_price",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "lower_price",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "quantity_per_grid",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "grids_quantity",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "upper_stop_loss_price",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "upper_stop_loss_enabled",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "upper_stop_loss_action",
            "type": "string",
            "default": "stop_bot",
            "enum": [
              "stop_bot",
              "stop_bot_and_buy",
              "stop_bot_and_sell",
              "stop_bot_and_close_position"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "lower_stop_loss_price",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "lower_stop_loss_enabled",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "lower_stop_loss_action",
            "type": "string",
            "default": "stop_bot",
            "enum": [
              "stop_bot",
              "stop_bot_and_buy",
              "stop_bot_and_sell",
              "stop_bot_and_close_position"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "leverage_type",
            "description": "Leverage type for futures accounts",
            "type": "string",
            "default": "not_specified",
            "enum": [
              "custom",
              "cross",
              "not_specified",
              "isolated"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "leverage_custom_value",
            "description": "Required if leverage_type = 'isolated'",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "note",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "max_active_buy_lines",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "max_active_sell_lines",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "order_currency_type",
            "description": "Order currency type",
            "type": "string",
            "default": "base",
            "enum": [
              "base",
              "quote"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "profit_currency_type",
            "description": "Profit currency type",
            "type": "string",
            "default": "quote",
            "enum": [
              "base",
              "quote"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "ignore_warnings",
            "description": "Ignore any warnings and create grid bot",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_up_enabled",
            "description": "Trailing up enabled",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_down_enabled",
            "description": "Trailing down enabled",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "grid_type",
            "description": "Grid Type",
            "type": "string",
            "default": "arithmetic",
            "enum": [
              "geometric",
              "arithmetic"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "mode",
            "description": "Grid Mode (Futures only)",
            "type": "string",
            "default": null,
            "enum": [
              "reversal",
              "long",
              "short"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "expansion_down_enabled",
            "description": "Expansion down enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "expansion_down_stop_price",
            "description": "Expansion down stop price (mandatory if Expansion down enabled)",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "expansion_up_enabled",
            "description": "Expansion up enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "expansion_up_stop_price",
            "description": "Expansion up stop price (mandatory if Expansion up enabled)",
            "type": "number",
            "format": "double",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Create Grid Bot (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "postVer1GridBotsManual"
      }
    },
    "/ver1/grid_bots": {
      "get": {
        "description": "Grid bots list (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "account_ids",
            "description": "Filter by account id",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "account_types",
            "description": "Filter by account type",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "state",
            "description": "Filter by bot state",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_by",
            "description": "Sort column",
            "type": "string",
            "enum": [
              "current_profit",
              "profit",
              "bot_id",
              "pair",
              "created_at",
              "updated_at",
              "name"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "Sort direction",
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "Param for a filter by created date",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "base",
            "description": "Base currency",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "quote",
            "description": "Quote currency",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Grid bots list (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "getVer1GridBots"
      }
    },
    "/ver1/grid_bots/{id}/note": {
      "post": {
        "description": "Grid Bot Note (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "note",
            "type": "string",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Grid Bot Note (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "postVer1GridBotsIdNote"
      }
    },
    "/ver1/grid_bots/{id}/events": {
      "get": {
        "description": "Grid Bot Events (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": true
          },
          {
            "in": "query",
            "name": "per_page",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 100,
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Grid Bot Events (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "getVer1GridBotsIdEvents"
      }
    },
    "/ver1/grid_bots/{id}/market_orders": {
      "get": {
        "description": "Grid Bot Market Orders (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Grid Bot Market Orders (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "getVer1GridBotsIdMarketOrders"
      }
    },
    "/ver1/grid_bots/{id}/profits": {
      "get": {
        "description": "Grid Bot Profits (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "description": "Param for a filter by created date",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "Param for a filter by created date",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Grid Bot Profits (Permission: BOTS_READ, Security: SIGNED)",
            "schema": {
              "$ref": "#/definitions/GridBotProfitsEntity"
            }
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "getVer1GridBotsIdProfits"
      }
    },
    "/ver1/grid_bots/{id}/manual": {
      "patch": {
        "description": "Edit Grid Bot (Manual) (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "Grid Bot's name",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "pair",
            "description": "Deprecated",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "upper_price",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "lower_price",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "quantity_per_grid",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "grids_quantity",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "upper_stop_loss_price",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "upper_stop_loss_enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "upper_stop_loss_action",
            "type": "string",
            "enum": [
              "stop_bot",
              "stop_bot_and_buy",
              "stop_bot_and_sell",
              "stop_bot_and_close_position"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "lower_stop_loss_price",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "lower_stop_loss_enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "lower_stop_loss_action",
            "type": "string",
            "enum": [
              "stop_bot",
              "stop_bot_and_buy",
              "stop_bot_and_sell",
              "stop_bot_and_close_position"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "leverage_type",
            "description": "Leverage type for futures accounts",
            "type": "string",
            "default": "not_specified",
            "enum": [
              "custom",
              "cross",
              "not_specified",
              "isolated"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "leverage_custom_value",
            "description": "Required if leverage_type = 'isolated'",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "note",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "max_active_buy_lines",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "max_active_sell_lines",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "ignore_warnings",
            "description": "Ignore any warnings and edit grid bot",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_up_enabled",
            "description": "Trailing up enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "trailing_down_enabled",
            "description": "Trailing down enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "grid_type",
            "description": "Grid Type",
            "type": "string",
            "enum": [
              "geometric",
              "arithmetic"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "expansion_down_enabled",
            "description": "Expansion down enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "expansion_down_stop_price",
            "description": "Expansion down stop price (mandatory if Expansion down enabled)",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "expansion_up_enabled",
            "description": "Expansion up enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "expansion_up_stop_price",
            "description": "Expansion up stop price (mandatory if Expansion up enabled)",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Edit Grid Bot (Manual) (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "patchVer1GridBotsIdManual"
      }
    },
    "/ver1/grid_bots/{id}": {
      "get": {
        "description": "Show Grid Bot (Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Show Grid Bot (Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "getVer1GridBotsId"
      },
      "delete": {
        "description": "Delete Grid Bot (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete Grid Bot (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "deleteVer1GridBotsId"
      }
    },
    "/ver1/grid_bots/{id}/disable": {
      "post": {
        "description": "Disable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Disable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "postVer1GridBotsIdDisable"
      }
    },
    "/ver1/grid_bots/{id}/enable": {
      "post": {
        "description": "Enable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Enable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "postVer1GridBotsIdEnable"
      }
    },
    "/ver1/grid_bots/{id}/required_balances": {
      "get": {
        "description": "Get required balances to start bot(Permission: BOTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get required balances to start bot(Permission: BOTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "grid_bots"
        ],
        "operationId": "getVer1GridBotsIdRequiredBalances"
      }
    },
    "/ver1/loose_accounts": {
      "post": {
        "description": "Create Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "tokens[code]",
            "type": "array",
            "required": true,
            "items": {
              "type": "string"
            }
          },
          {
            "in": "formData",
            "name": "tokens[amount]",
            "type": "array",
            "required": true,
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "formData",
            "name": "include_in_summary",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Create Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "loose_accounts"
        ],
        "operationId": "postVer1LooseAccounts"
      }
    },
    "/ver1/loose_accounts/available_currencies": {
      "get": {
        "description": "Available currencies (Permission: ACCOUNTS_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contains",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Available currencies (Permission: ACCOUNTS_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "loose_accounts"
        ],
        "operationId": "getVer1LooseAccountsAvailableCurrencies"
      }
    },
    "/ver1/loose_accounts/{account_id}": {
      "put": {
        "description": "Update Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "tokens[code]",
            "type": "array",
            "required": true,
            "items": {
              "type": "string"
            }
          },
          {
            "in": "formData",
            "name": "tokens[amount]",
            "type": "array",
            "required": true,
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "formData",
            "name": "include_in_summary",
            "type": "boolean",
            "required": false
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Update Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "loose_accounts"
        ],
        "operationId": "putVer1LooseAccountsAccountId"
      }
    },
    "/ver1/mini_apps/credentials": {
      "get": {
        "description": "Fetch API credentials by token",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Fetch API credentials by token"
          }
        },
        "tags": [
          "mini_apps"
        ],
        "operationId": "getVer1MiniAppsCredentials"
      }
    },
    "/ver1/mini_apps/storage": {
      "get": {
        "description": "Fetch data from storage (Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "key",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Fetch data from storage (Security: SIGNED)"
          }
        },
        "tags": [
          "mini_apps"
        ],
        "operationId": "getVer1MiniAppsStorage"
      },
      "post": {
        "description": "Write data into storage (Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "key",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "data",
            "type": "json",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Write data into storage (Security: SIGNED)"
          }
        },
        "tags": [
          "mini_apps"
        ],
        "operationId": "postVer1MiniAppsStorage"
      }
    },
    "/ver1/portfolios/{id}": {
      "get": {
        "description": "Show portfolio info (Permission: NONE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Show portfolio info (Permission: NONE, Security: SIGNED)"
          }
        },
        "tags": [
          "portfolios"
        ],
        "operationId": "getVer1PortfoliosId"
      }
    },
    "/ver1/portfolios": {
      "get": {
        "description": "Show portfolios list (Permission: NONE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Current page",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Records per page",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Show portfolios list (Permission: NONE, Security: SIGNED)"
          }
        },
        "tags": [
          "portfolios"
        ],
        "operationId": "getVer1Portfolios"
      }
    },
    "/ver1/portfolios/portfolios": {
      "get": {
        "description": "Show portfolios, [DEPRECATED] Please, use GET /portfolios instead of portfolios/portfolios",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Show portfolios, [DEPRECATED] Please, use GET /portfolios instead of portfolios/portfolios"
          }
        },
        "tags": [
          "portfolios"
        ],
        "operationId": "getVer1PortfoliosPortfolios"
      }
    },
    "/ver1/ping": {
      "get": {
        "description": "Test connectivity to the Rest API (Permission: NONE, Security: NONE)",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Test connectivity to the Rest API (Permission: NONE, Security: NONE)",
            "schema": {
              "$ref": "#/definitions/PongEntity"
            }
          }
        },
        "tags": [
          "ping"
        ],
        "operationId": "getVer1Ping"
      }
    },
    "/ver1/time": {
      "get": {
        "description": "Test connectivity to the Rest API and get the current server time (Permission: NONE, Security: NONE)",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Test connectivity to the Rest API and get the current server time (Permission: NONE, Security: NONE)",
            "schema": {
              "$ref": "#/definitions/TimeEntity"
            }
          }
        },
        "tags": [
          "time"
        ],
        "operationId": "getVer1Time"
      }
    },
    "/ver1/validate": {
      "get": {
        "description": "Api credentials validity check (Permission: NONE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Api credentials validity check (Permission: NONE, Security: SIGNED)"
          }
        },
        "tags": [
          "general_validate"
        ],
        "operationId": "getVer1Validate"
      }
    },
    "/v2/smart_trades": {
      "get": {
        "description": "Get smart trade history (Permission: SMART_TRADE_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "account_id",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "pair",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "type": "string",
            "enum": [
              "simple_buy",
              "simple_sell",
              "smart_sell",
              "smart_trade",
              "smart_cover",
              "smart_buy"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "per_page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 100,
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "type": "string",
            "enum": [
              "all",
              "active",
              "finished",
              "successfully_finished",
              "cancelled",
              "failed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "type": "string",
            "default": "status",
            "enum": [
              "created_at",
              "updated_at",
              "closed_at",
              "status",
              "profit",
              "profit_percentage"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "Param for a filter by created date",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "Param for a filter by created date",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "base",
            "description": "Base currency",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "quote",
            "description": "Quote currency",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get smart trade history (Permission: SMART_TRADE_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "getV2SmartTrades"
      },
      "post": {
        "description": "Create smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "account_id",
            "description": "id from GET /ver1/accounts",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "pair",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "instant",
            "description": "true for Simple Buy and Simple Sell",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "skip_enter_step",
            "description": "true only for Smart Sell",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "note",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "leverage[enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "leverage[type]",
            "type": "string",
            "enum": [
              "custom",
              "cross",
              "isolated"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "leverage[value]",
            "description": "Cross leverage value",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "position[type]",
            "type": "string",
            "enum": [
              "buy",
              "sell"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "position[order_type]",
            "type": "string",
            "enum": [
              "market",
              "limit",
              "conditional"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "position[units][value]",
            "description": "Amount of units to buy",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "position[price][value]",
            "description": "Price for limit order",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "position[conditional][price][value]",
            "description": "Conditional trigger price",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "position[conditional][price][type]",
            "description": "By default ask for long, bid for short",
            "type": "string",
            "enum": [
              "bid",
              "ask",
              "last"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "position[conditional][order_type]",
            "type": "string",
            "enum": [
              "market",
              "limit"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "position[conditional][trailing][enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "position[conditional][trailing][percent]",
            "description": "Should be 100% in the sum of all steps",
            "type": "number",
            "format": "float",
            "required": true
          },
          {
            "in": "formData",
            "name": "take_profit[enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][order_type]",
            "description": "market, limit",
            "type": "array",
            "required": true,
            "items": {
              "type": "string",
              "enum": [
                "market",
                "limit"
              ]
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][volume]",
            "type": "array",
            "required": true,
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][price][type]",
            "description": "bid, ask, last",
            "type": "array",
            "required": true,
            "items": {
              "type": "string",
              "enum": [
                "bid",
                "ask",
                "last"
              ]
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][price][value]",
            "description": "only if position has no trailing or position trailing is finished",
            "type": "array",
            "required": false,
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][price][percent]",
            "description": "only if position has trailing and position trailing is not finished",
            "type": "array",
            "required": false,
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][trailing][enabled]",
            "type": "array",
            "default": false,
            "required": true,
            "items": {
              "type": "boolean"
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][trailing][percent]",
            "type": "array",
            "required": true,
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "in": "formData",
            "name": "stop_loss[enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[breakeven]",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss[order_type]",
            "type": "string",
            "enum": [
              "market",
              "limit"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[price][value]",
            "description": "Price for limit order",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[conditional][price][type]",
            "type": "string",
            "enum": [
              "bid",
              "ask",
              "last"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[conditional][price][value]",
            "description": "if position has no trailing or position trailing is finished",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss[conditional][price][percent]",
            "description": "only if position has trailing and position trailing is not finished",
            "type": "number",
            "format": "float",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss[conditional][trailing][enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[timeout][enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[timeout][value]",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Create smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "postV2SmartTrades"
      }
    },
    "/v2/smart_trades/{id}/reduce_funds_info": {
      "get": {
        "description": "Reduce funds for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Reduce funds for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "getV2SmartTradesIdReduceFundsInfo"
      }
    },
    "/v2/smart_trades/{id}": {
      "get": {
        "description": "Get smart trade v2 by id (Permission: SMART_TRADE_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get smart trade v2 by id (Permission: SMART_TRADE_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "getV2SmartTradesId"
      },
      "delete": {
        "description": "Cancel smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Cancel smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "deleteV2SmartTradesId"
      },
      "patch": {
        "description": "Update smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "leverage[enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "leverage[type]",
            "type": "string",
            "enum": [
              "custom",
              "cross",
              "isolated"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "leverage[value]",
            "description": "Cross leverage value",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "position[units][value]",
            "description": "Amount of units to buy",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "position[order_type]",
            "type": "string",
            "enum": [
              "market",
              "limit",
              "conditional"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "position[price][value]",
            "description": "Price for limit order",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "position[conditional][price][value]",
            "description": "Conditional trigger price",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "position[conditional][price][type]",
            "description": "By default ask for long, bid for short",
            "type": "string",
            "enum": [
              "bid",
              "ask",
              "last"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "position[conditional][order_type]",
            "type": "string",
            "enum": [
              "market",
              "limit"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "position[conditional][trailing][enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "position[conditional][trailing][percent]",
            "type": "number",
            "format": "float",
            "required": true
          },
          {
            "in": "formData",
            "name": "take_profit[enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][order_type]",
            "type": "array",
            "required": true,
            "items": {
              "type": "string",
              "enum": [
                "market",
                "limit"
              ]
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][volume]",
            "type": "array",
            "required": true,
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][price][type]",
            "type": "array",
            "required": true,
            "items": {
              "type": "string",
              "enum": [
                "bid",
                "ask",
                "last"
              ]
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][price][value]",
            "type": "array",
            "required": false,
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][price][percent]",
            "type": "array",
            "required": false,
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][trailing][enabled]",
            "type": "array",
            "default": false,
            "required": true,
            "items": {
              "type": "boolean"
            }
          },
          {
            "in": "formData",
            "name": "take_profit[steps][][trailing][percent]",
            "type": "array",
            "required": true,
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "in": "formData",
            "name": "stop_loss[enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[breakeven]",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss[order_type]",
            "type": "string",
            "enum": [
              "market",
              "limit"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[price][value]",
            "description": "Price for limit order",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[conditional][price][type]",
            "type": "string",
            "enum": [
              "bid",
              "ask",
              "last"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[conditional][price][value]",
            "description": "Trigger price",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss[conditional][price][percent]",
            "type": "number",
            "format": "float",
            "required": false
          },
          {
            "in": "formData",
            "name": "stop_loss[conditional][trailing][enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[timeout][enabled]",
            "type": "boolean",
            "default": false,
            "required": true
          },
          {
            "in": "formData",
            "name": "stop_loss[timeout][value]",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Update smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "patchV2SmartTradesId"
      }
    },
    "/v2/smart_trades/{id}/reduce_funds": {
      "post": {
        "description": "Reduce funds for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "order_type",
            "type": "string",
            "enum": [
              "market",
              "limit"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "units[value]",
            "description": "Amount of units to buy",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "price[value]",
            "description": "Price for limit order",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Reduce funds for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "postV2SmartTradesIdReduceFunds"
      }
    },
    "/v2/smart_trades/{id}/add_funds": {
      "post": {
        "description": "Average for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "order_type",
            "type": "string",
            "enum": [
              "market",
              "limit"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "units[value]",
            "description": "Amount of units to buy",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "price[value]",
            "description": "Price for limit order",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Average for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "postV2SmartTradesIdAddFunds"
      }
    },
    "/v2/smart_trades/{id}/close_by_market": {
      "post": {
        "description": "Close by market smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Close by market smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "postV2SmartTradesIdCloseByMarket"
      }
    },
    "/v2/smart_trades/{id}/force_start": {
      "post": {
        "description": "Force start smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Force start smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "postV2SmartTradesIdForceStart"
      }
    },
    "/v2/smart_trades/{id}/force_process": {
      "post": {
        "description": "Process smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Process smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "postV2SmartTradesIdForceProcess"
      }
    },
    "/v2/smart_trades/{id}/set_note": {
      "post": {
        "description": "Set note to smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "note",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Set note to smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "postV2SmartTradesIdSetNote"
      }
    },
    "/v2/smart_trades/{smart_trade_id}/trades": {
      "get": {
        "description": "Get smart trade v2 trades (Permission: SMART_TRADE_READ, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "smart_trade_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get smart trade v2 trades (Permission: SMART_TRADE_READ, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "getV2SmartTradesSmartTradeIdTrades"
      }
    },
    "/v2/smart_trades/{smart_trade_id}/trades/{id}/close_by_market": {
      "post": {
        "description": "Panic close trade by market (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "smart_trade_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Panic close trade by market (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "postV2SmartTradesSmartTradeIdTradesIdCloseByMarket"
      }
    },
    "/v2/smart_trades/{smart_trade_id}/trades/{id}": {
      "delete": {
        "description": "Cancel trade (Permission: SMART_TRADE_WRITE, Security: SIGNED)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "smart_trade_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Cancel trade (Permission: SMART_TRADE_WRITE, Security: SIGNED)"
          }
        },
        "tags": [
          "smart_trades_v2"
        ],
        "operationId": "deleteV2SmartTradesSmartTradeIdTradesId"
      }
    },
    "/v2/accounts/market_pairs": {
      "get": {
        "description": "All market pairs (Permission: NONE, Security: NONE)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "market_code",
            "description": "market_code from account model",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "All market pairs (Permission: NONE, Security: NONE)"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "getV2AccountsMarketPairs"
      }
    }
  },
  "definitions": {
    "BotEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 5
        },
        "account_id": {
          "type": "integer",
          "format": "int32",
          "example": 10
        },
        "is_enabled": {
          "type": "boolean",
          "example": true
        },
        "max_safety_orders": {
          "type": "integer",
          "format": "int32",
          "example": 5
        },
        "active_safety_orders_count": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "pairs": {
          "type": "string",
          "example": "['BTC_LTC', 'BTC_ETH', 'BTC_ADA']",
          "description": "Format: [QUOTE_BASE, ...]"
        },
        "strategy_list": {
          "type": "string",
          "example": "[{'options'=>{'time'=>'5m', 'type'=>'buy_or_strong_buy'}, 'strategy'=>'trading_view'}, ...]"
        },
        "close_strategy_list": {
          "type": "string",
          "example": "[{'options'=>{'time'=>'5m', 'type'=>'buy_or_strong_buy'}, 'strategy'=>'trading_view'}, ...]"
        },
        "max_active_deals": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "active_deals_count": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "deletable?": {
          "type": "boolean",
          "example": true
        },
        "created_at": {
          "type": "string",
          "example": "2018-08-08 08:08:08"
        },
        "updated_at": {
          "type": "string",
          "example": "2018-08-10 10:10:10"
        },
        "trailing_enabled": {
          "type": "boolean",
          "example": true
        },
        "tsl_enabled": {
          "type": "boolean",
          "example": true
        },
        "deal_start_delay_seconds": {
          "type": "integer",
          "format": "int32",
          "example": 60,
          "description": "Deal start delay in seconds"
        },
        "stop_loss_timeout_enabled": {
          "type": "boolean",
          "example": true
        },
        "stop_loss_timeout_in_seconds": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "disable_after_deals_count": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "deals_counter": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "allowed_deals_on_same_pair": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "easy_form_supported": {
          "type": "boolean",
          "example": true
        },
        "close_deals_timeout": {
          "type": "integer",
          "format": "int32",
          "example": 70,
          "description": "Close bot deals after given number of seconds"
        },
        "url_secret": {
          "type": "string"
        },
        "take_profit_steps": {
          "type": "array",
          "items": {
            "type": "json"
          }
        },
        "name": {
          "type": "string",
          "example": "'Test Bot'"
        },
        "take_profit": {
          "type": "string",
          "example": "'1.5'",
          "description": "'Percentage'"
        },
        "min_profit_percentage": {
          "type": "string",
          "example": "'1.5'",
          "description": "'Min Profit Percentage'"
        },
        "base_order_volume": {
          "type": "string",
          "example": "'0.002'"
        },
        "safety_order_volume": {
          "type": "string",
          "example": "'0.0015'"
        },
        "safety_order_step_percentage": {
          "type": "string",
          "example": "'1.1'"
        },
        "take_profit_type": {
          "type": "string",
          "example": "'base'",
          "description": "Values: base, total"
        },
        "min_profit_type": {
          "type": "string",
          "example": "'total_bought_volume'",
          "description": "Values: base_order_volume, total_bought_volume"
        },
        "type": {
          "type": "string",
          "example": "'Bot::SingleBot'",
          "description": "Values: [\"Bot::MultiBot\", \"Bot::SingleBot\", \"Bot::SwitchBot\"]"
        },
        "martingale_volume_coefficient": {
          "type": "string",
          "example": "'1.3'"
        },
        "martingale_step_coefficient": {
          "type": "string",
          "example": "'0.9'"
        },
        "stop_loss_percentage": {
          "type": "string",
          "example": "'5.5'"
        },
        "cooldown": {
          "type": "string",
          "example": "'200'"
        },
        "btc_price_limit": {
          "type": "string",
          "example": "'30.15'"
        },
        "strategy": {
          "type": "string",
          "example": "'long'",
          "description": "Values: long, short"
        },
        "min_volume_btc_24h": {
          "type": "string",
          "example": "'500.5'"
        },
        "profit_currency": {
          "type": "string",
          "example": "'quote_currency'",
          "description": "Values: quote_currency, base_currency"
        },
        "min_price": {
          "type": "string",
          "example": "'0.0245'"
        },
        "max_price": {
          "type": "string",
          "example": "'0.0123'"
        },
        "stop_loss_type": {
          "type": "string",
          "example": "'stop_loss'",
          "description": "Values: stop_loss, stop_loss_and_disable_bot"
        },
        "safety_order_volume_type": {
          "type": "string",
          "example": "'base_currency'",
          "description": "Values: quote_currency, base_currency, percent, xbt"
        },
        "base_order_volume_type": {
          "type": "string",
          "example": "'percent'",
          "description": "Values: quote_currency, base_currency, percent, xbt"
        },
        "account_name": {
          "type": "string",
          "example": "'My account'"
        },
        "trailing_deviation": {
          "type": "string",
          "example": "0.14"
        },
        "finished_deals_profit_usd": {
          "type": "string",
          "example": "12.14"
        },
        "finished_deals_count": {
          "type": "string",
          "example": "252.1"
        },
        "leverage_type": {
          "type": "string",
          "example": "'not_specified'",
          "description": "Values: cross, not_specified, isolated"
        },
        "leverage_custom_value": {
          "type": "string",
          "example": "'1'"
        },
        "start_order_type": {
          "type": "string",
          "example": "'limit'",
          "description": "Values: limit, market"
        },
        "active_deals_usd_profit": {
          "type": "string",
          "example": "200.21",
          "description": "Sum of active deals profits"
        },
        "reinvesting_percentage": {
          "type": "integer",
          "format": "int32",
          "example": 40.6,
          "description": "Percent of reinvesting"
        },
        "risk_reduction_percentage": {
          "type": "integer",
          "format": "int32",
          "example": 40.6,
          "description": "Percent of risk reduction"
        },
        "reinvested_volume_usd": {
          "type": "integer",
          "format": "int32"
        },
        "min_price_percentage": {
          "type": "integer",
          "format": "int32"
        },
        "max_price_percentage": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AccountEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 12
        },
        "auto_balance_period": {
          "type": "integer",
          "format": "int32",
          "example": 12
        },
        "auto_balance_portfolio_id": {
          "type": "integer",
          "format": "int32",
          "example": 452
        },
        "auto_balance_portfolio": {
          "$ref": "#/definitions/PortfolioEntity"
        },
        "auto_balance_currency_change_limit": {
          "type": "integer",
          "format": "int32",
          "example": 5
        },
        "autobalance_enabled": {
          "type": "boolean",
          "example": true
        },
        "hedge_mode_available": {
          "type": "boolean",
          "example": false
        },
        "hedge_mode_enabled": {
          "type": "boolean",
          "example": false
        },
        "is_locked": {
          "type": "boolean",
          "example": true
        },
        "smart_trading_supported": {
          "type": "boolean",
          "example": true
        },
        "smart_selling_supported": {
          "type": "boolean",
          "example": true,
          "description": "DEPRECATED. use smart_trading_supported instead"
        },
        "available_for_trading": {
          "type": "boolean",
          "example": true
        },
        "stats_supported": {
          "type": "boolean",
          "example": true
        },
        "trading_supported": {
          "type": "boolean",
          "example": true
        },
        "market_buy_supported": {
          "type": "boolean",
          "example": true
        },
        "market_sell_supported": {
          "type": "boolean",
          "example": true
        },
        "conditional_buy_supported": {
          "type": "boolean",
          "example": true
        },
        "bots_allowed": {
          "type": "boolean",
          "example": "false"
        },
        "bots_ttp_allowed": {
          "type": "boolean",
          "example": "false"
        },
        "bots_tsl_allowed": {
          "type": "boolean",
          "example": "false"
        },
        "gordon_bots_available": {
          "type": "boolean",
          "example": "false"
        },
        "multi_bots_allowed": {
          "type": "boolean",
          "example": "false"
        },
        "created_at": {
          "type": "string",
          "example": "2018-08-08 08:08:08"
        },
        "updated_at": {
          "type": "string",
          "example": "2018-08-22 02:25:08"
        },
        "last_auto_balance": {
          "type": "string",
          "example": "2018-08-21 08:08:08"
        },
        "fast_convert_available": {
          "type": "boolean",
          "example": true,
          "description": "Sell all to USD/BTC possibility"
        },
        "grid_bots_allowed": {
          "type": "boolean",
          "example": true
        },
        "api_key_invalid": {
          "type": "boolean",
          "example": true
        },
        "deposit_enabled": {
          "type": "boolean",
          "example": "false"
        },
        "include_in_summary": {
          "type": "boolean",
          "example": "false",
          "description": "Include the account in summary or not"
        },
        "supported_market_types": {
          "type": "string"
        },
        "primary_display_currency_profit_percentage": {
          "type": "string"
        },
        "primary_display_currency_profit": {
          "type": "string"
        },
        "day_profit_primary_display_currency_percentage": {
          "type": "string"
        },
        "day_profit_primary_display_currency": {
          "type": "string"
        },
        "primary_display_currency_amount": {
          "type": "string"
        },
        "total_primary_display_currency_profit": {
          "type": "string"
        },
        "available_include_in_summary": {
          "type": "boolean",
          "example": "false"
        },
        "api_key": {
          "type": "string",
          "example": "''"
        },
        "name": {
          "type": "string",
          "example": "'Binance 2 '"
        },
        "auto_balance_method": {
          "type": "integer",
          "format": "int32",
          "example": "'time'",
          "description": "Values: time, currency_change"
        },
        "auto_balance_error": {
          "type": "string",
          "example": "'Failed to autobalance'"
        },
        "customer_id": {
          "type": "string"
        },
        "subaccount_name": {
          "type": "string"
        },
        "lock_reason": {
          "type": "string",
          "example": "'invalid_api_key'"
        },
        "btc_amount": {
          "type": "string",
          "example": "'0.01134219'"
        },
        "usd_amount": {
          "type": "string",
          "example": "'70.93146245'"
        },
        "day_profit_btc": {
          "type": "string",
          "example": "'-0.00006'"
        },
        "day_profit_usd": {
          "type": "string",
          "example": "'-0.02147'"
        },
        "day_profit_btc_percentage": {
          "type": "string",
          "example": "'-0.26'"
        },
        "day_profit_usd_percentage": {
          "type": "string",
          "example": "'-1.23'"
        },
        "btc_profit": {
          "type": "string",
          "example": "'0.0001625'",
          "description": "Month period"
        },
        "usd_profit": {
          "type": "string",
          "example": "'5.05764787'",
          "description": "Month period"
        },
        "usd_profit_percentage": {
          "type": "string",
          "example": "'6.25'",
          "description": "Month period"
        },
        "btc_profit_percentage": {
          "type": "string",
          "example": "'2.36'",
          "description": "Month period"
        },
        "total_btc_profit": {
          "type": "string",
          "example": "'0.0012456'"
        },
        "total_usd_profit": {
          "type": "string",
          "example": "'6.123181'"
        },
        "pretty_display_type": {
          "type": "string",
          "example": "'BittrexAccount'"
        },
        "exchange_name": {
          "type": "string",
          "example": "'Binance Futures'"
        },
        "market_code": {
          "type": "string",
          "example": "'deribit_testnet'"
        },
        "address": {
          "type": "string",
          "example": "'0xe00000dded00bbb08725d77777777ff070aa7aa7'"
        },
        "api_keys_state": {
          "type": "string",
          "example": "'expired'",
          "description": "Values: ok, expired, expire_soon"
        }
      }
    },
    "PortfolioEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "portfolio_entries": {
          "$ref": "#/definitions/PortfolioEntryEntity"
        }
      }
    },
    "PortfolioEntryEntity": {
      "type": "object",
      "properties": {
        "target_percentage": {
          "type": "string"
        },
        "currency_code": {
          "type": "string"
        }
      }
    },
    "GridBotEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 5
        },
        "account_id": {
          "type": "integer",
          "format": "int32",
          "example": 10
        },
        "account_name": {
          "type": "string",
          "example": "'My account'"
        },
        "is_enabled": {
          "type": "boolean",
          "example": true
        },
        "grids_quantity": {
          "type": "string",
          "example": "'20'"
        },
        "created_at": {
          "type": "string",
          "example": "2018-08-08 08:08:08"
        },
        "updated_at": {
          "type": "string",
          "example": "2018-08-10 10:10:10"
        },
        "strategy_type": {
          "type": "string",
          "example": "'manual'"
        },
        "upper_stop_loss_enabled": {
          "type": "boolean",
          "example": true
        },
        "lower_stop_loss_enabled": {
          "type": "boolean",
          "example": true
        },
        "note": {
          "type": "string",
          "example": "Best pair"
        },
        "editable": {
          "type": "boolean",
          "example": false
        },
        "lower_price": {
          "type": "string",
          "example": "'8000'"
        },
        "lower_stop_loss_price": {
          "type": "string",
          "example": "'7500'"
        },
        "lower_stop_loss_action": {
          "type": "string",
          "example": "'stop_bot'"
        },
        "upper_price": {
          "type": "string",
          "example": "'10000'"
        },
        "upper_stop_loss_price": {
          "type": "string",
          "example": "'12000'"
        },
        "upper_stop_loss_action": {
          "type": "string",
          "example": "'stop_bot'"
        },
        "quantity_per_grid": {
          "type": "string",
          "example": "'100'"
        },
        "leverage_type": {
          "type": "string",
          "example": "'isolated'"
        },
        "leverage_custom_value": {
          "type": "string",
          "example": "'20.1'"
        },
        "name": {
          "type": "string",
          "example": "'GridBot1'"
        },
        "pair": {
          "type": "string",
          "example": "'BTC_ETH'"
        },
        "start_price": {
          "type": "string",
          "example": "'9000'"
        },
        "grid_price_step": {
          "type": "string",
          "example": "'100'"
        },
        "current_profit": {
          "type": "string",
          "example": "100"
        },
        "current_profit_usd": {
          "type": "string",
          "example": "1000"
        },
        "total_profits_count": {
          "type": "string",
          "example": "10"
        },
        "bought_volume": {
          "type": "string",
          "example": "1000"
        },
        "sold_volume": {
          "type": "string",
          "example": "1000"
        },
        "profit_percentage": {
          "type": "string",
          "example": "0.1"
        },
        "current_price": {
          "type": "string",
          "example": "100.1"
        },
        "max_active_buy_lines": {
          "type": "string",
          "example": "10"
        },
        "max_active_sell_lines": {
          "type": "string",
          "example": "10"
        },
        "order_currency_type": {
          "type": "string",
          "example": "base"
        },
        "profit_currency_type": {
          "type": "string",
          "example": "quote"
        },
        "trailing_up_enabled": {
          "type": "boolean",
          "example": true
        },
        "grid_type": {
          "type": "string",
          "example": "arithmetic"
        },
        "investment_base_currency": {
          "type": "string",
          "example": "100"
        },
        "investment_quote_currency": {
          "type": "string",
          "example": "100"
        },
        "unrealized_profit_loss": {
          "type": "string",
          "example": "2500.0"
        },
        "current_profit_loss": {
          "type": "string",
          "example": "0.2284"
        },
        "current_profit_loss_percent": {
          "type": "string",
          "example": "2.007"
        },
        "orderbook_price_currency": {
          "type": "string",
          "example": "USDT"
        },
        "expansion_down_enabled": {
          "type": "boolean",
          "example": false
        },
        "expansion_down_stop_price": {
          "type": "string",
          "example": "10500.0"
        },
        "grid_lines": {
          "$ref": "#/definitions/GridLineEntity"
        }
      }
    },
    "GridLineEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 21,
          "description": "Uniq id"
        },
        "price": {
          "type": "string",
          "example": "'8000'"
        },
        "side": {
          "type": "string",
          "example": "'SELL'"
        },
        "order_placed": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "GridBotProfitsEntity": {
      "type": "object",
      "properties": {
        "grid_line_id": {
          "type": "integer",
          "format": "int32",
          "example": "'8000'"
        },
        "profit": {
          "type": "string",
          "example": "'0.01'"
        },
        "usd_profit": {
          "type": "string",
          "example": "'100'"
        },
        "created_at": {
          "type": "string",
          "example": "2018-08-08 08:08:08"
        },
        "grid_line": {
          "$ref": "#/definitions/GridLineEntity"
        }
      },
      "description": "GridBotProfitsEntity model"
    },
    "MarketplacePresets_IndexEntity": {
      "type": "object",
      "properties": {
        "bots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketplacePresets_IndexEntity_MarketplaceBotEntity"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "MarketplacePresets_IndexEntity model"
    },
    "MarketplacePresets_IndexEntity_MarketplaceBotEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "marketplace_item": {
          "$ref": "#/definitions/MarketplacePresets_IndexEntity_MarketplaceBotEntity_MarketplaceItem"
        },
        "profit": {
          "$ref": "#/definitions/MarketplacePresets_IndexEntity_MarketplaceBotEntity_Profit"
        },
        "currencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "copies": {
          "type": "integer",
          "format": "int32",
          "description": "Bot's copies count"
        },
        "is_favorite": {
          "type": "boolean"
        }
      }
    },
    "MarketplacePresets_IndexEntity_MarketplaceBotEntity_MarketplaceItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "icon_url": {
          "type": "string"
        }
      }
    },
    "MarketplacePresets_IndexEntity_MarketplaceBotEntity_Profit": {
      "type": "object",
      "properties": {
        "period": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "chart_data": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "PongEntity": {
      "type": "object",
      "properties": {
        "pong": {
          "type": "string",
          "example": "'pong'"
        }
      },
      "description": "PongEntity model"
    },
    "TimeEntity": {
      "type": "object",
      "properties": {
        "server_time": {
          "type": "integer",
          "format": "int32",
          "example": "1592769067",
          "description": "UNIX timestamp"
        }
      },
      "description": "TimeEntity model"
    },
    "DealEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "type": {
          "type": "string",
          "example": "Deal::ShortDeal",
          "nullable": true
        },
        "bot_id": {
          "type": "integer",
          "example": 111
        },
        "max_safety_orders": {
          "type": "integer",
          "example": 2
        },
        "deal_has_error": {
          "type": "boolean",
          "example": true
        },
        "from_currency_id": {
          "type": "integer",
          "description": "DEPRECATED",
          "example": 5
        },
        "to_currency_id": {
          "type": "integer",
          "description": "DEPRECATED",
          "example": 10
        },
        "account_id": {
          "type": "integer",
          "example": 121
        },
        "active_safety_orders_count": {
          "type": "integer",
          "example": 1
        },
        "created_at": {
          "type": "string",
          "example": "2018-08-08 08:08:08"
        },
        "updated_at": {
          "type": "string",
          "example": "2018-09-09 09:09:09"
        },
        "closed_at": {
          "type": "string",
          "example": "2018-10-10 10:10:10",
          "nullable": true
        },
        "finished?": {
          "type": "boolean"
        },
        "current_active_safety_orders_count": {
          "type": "integer",
          "example": 1
        },
        "current_active_safety_orders": {
          "type": "integer",
          "description": "DEPRECATED",
          "example": 1
        },
        "completed_safety_orders_count": {
          "type": "integer",
          "description": "completed safeties (not including manual)",
          "example": 2
        },
        "completed_manual_safety_orders_count": {
          "type": "integer",
          "description": "completed manual safeties",
          "example": 2
        },
        "cancellable?": {
          "type": "boolean"
        },
        "panic_sellable?": {
          "type": "boolean"
        },
        "trailing_enabled": {
          "type": "boolean",
          "example": true,
          "nullable": true
        },
        "tsl_enabled": {
          "type": "boolean",
          "example": true
        },
        "stop_loss_timeout_enabled": {
          "type": "boolean",
          "example": true
        },
        "stop_loss_timeout_in_seconds": {
          "type": "integer",
          "example": 2
        },
        "active_manual_safety_orders": {
          "type": "integer",
          "example": 2
        },
        "pair": {
          "type": "string",
          "description": "Format: QUOTE_BASE",
          "example": "'BTC_ADA'"
        },
        "status": {
          "type": "string",
          "description": "Values: created, base_order_placed, bought, cancelled, completed, failed, panic_sell_pending, panic_sell_order_placed, panic_sold, cancel_pending, stop_loss_pending, stop_loss_finished, stop_loss_order_placed, switched, switched_take_profit, ttp_activated, ttp_order_placed, liquidated, bought_safety_pending, bought_take_profit_pending, settled, close_strategy_activated",
          "example": "'failed'"
        },
        "localized_status": {
          "type": "string"
        },
        "take_profit": {
          "type": "string",
          "description": "Percentage",
          "example": "'1.23'",
          "nullable": true
        },
        "base_order_volume": {
          "type": "string",
          "example": "'0.001'",
          "nullable": true
        },
        "safety_order_volume": {
          "type": "string",
          "example": "'0.0015'",
          "nullable": true
        },
        "safety_order_step_percentage": {
          "type": "string",
          "example": "'1.11'"
        },
        "leverage_type": {
          "type": "string",
          "example": "'isolated'"
        },
        "leverage_custom_value": {
          "type": "string",
          "example": "'20.1'",
          "nullable": true
        },
        "bought_amount": {
          "type": "string",
          "example": "'1.5'",
          "nullable": true
        },
        "bought_volume": {
          "type": "string",
          "example": "'150'",
          "nullable": true
        },
        "bought_average_price": {
          "type": "string",
          "example": "'100'"
        },
        "base_order_average_price": {
          "type": "string",
          "example": "'100'",
          "nullable": true
        },
        "sold_amount": {
          "type": "string",
          "example": "'1.5'",
          "nullable": true
        },
        "sold_volume": {
          "type": "string",
          "example": "'150'",
          "nullable": true
        },
        "sold_average_price": {
          "type": "string",
          "example": "'100'",
          "nullable": true
        },
        "take_profit_type": {
          "type": "string",
          "description": "Values: base, total",
          "example": "'base'"
        },
        "final_profit": {
          "type": "string",
          "example": "'-0.00051'"
        },
        "martingale_coefficient": {
          "type": "string",
          "description": "Percentage",
          "example": "'1.2'"
        },
        "martingale_volume_coefficient": {
          "type": "string",
          "description": "Percentage",
          "example": "'1.0'"
        },
        "martingale_step_coefficient": {
          "type": "string",
          "description": "Percentage",
          "example": "'1.0'"
        },
        "stop_loss_percentage": {
          "type": "string",
          "example": "'3.6'",
          "nullable": true
        },
        "error_message": {
          "type": "string",
          "example": "'Error placing base order'",
          "nullable": true
        },
        "profit_currency": {
          "type": "string",
          "description": "Values: quote_currency, base_currency",
          "example": "'quote_currency'"
        },
        "stop_loss_type": {
          "type": "string",
          "description": "Values: stop_loss, stop_loss_and_disable_bot",
          "example": "'stop_loss'"
        },
        "safety_order_volume_type": {
          "type": "string",
          "description": "Values: quote_currency, base_currency, percent, xbt",
          "example": "'quote_currency'"
        },
        "base_order_volume_type": {
          "type": "string",
          "description": "Values: quote_currency, base_currency, percent, xbt",
          "example": "'base_currency,'"
        },
        "from_currency": {
          "type": "string",
          "example": "'BTC'"
        },
        "to_currency": {
          "type": "string",
          "example": "'ADA'"
        },
        "current_price": {
          "type": "string",
          "example": "'102'"
        },
        "take_profit_price": {
          "type": "string",
          "example": "'105'"
        },
        "stop_loss_price": {
          "type": "string",
          "example": "'95.3'",
          "nullable": true
        },
        "final_profit_percentage": {
          "type": "string",
          "example": "'4.2'"
        },
        "actual_profit_percentage": {
          "type": "string",
          "example": "'3.4'"
        },
        "bot_name": {
          "type": "string",
          "example": "My bot"
        },
        "account_name": {
          "type": "string",
          "example": "My Account"
        },
        "usd_final_profit": {
          "type": "string",
          "example": "'3.3523452'"
        },
        "actual_profit": {
          "type": "string",
          "example": "'0.0023'"
        },
        "actual_usd_profit": {
          "type": "string",
          "example": "'0.0023'"
        },
        "failed_message": {
          "type": "string",
          "example": "Failed",
          "nullable": true
        },
        "reserved_base_coin": {
          "type": "string",
          "example": "1.3423523"
        },
        "reserved_second_coin": {
          "type": "string",
          "example": "0.1412454"
        },
        "trailing_deviation": {
          "type": "string",
          "example": "0.14",
          "nullable": true
        },
        "trailing_max_price": {
          "type": "string",
          "description": "Highest price met in case of long deal, lowest price otherwise",
          "example": "0.1412454",
          "nullable": true
        },
        "tsl_max_price": {
          "type": "string",
          "description": "Highest price met in TSL in case of long deal, lowest price otherwise",
          "example": "0.1412454",
          "nullable": true
        },
        "strategy": {
          "type": "string",
          "description": "short or long",
          "example": "'short'"
        },
        "reserved_quote_funds": {
          "type": "string",
          "description": "Sum of reserved in active deals funds in QUOTE",
          "example": "11.2342",
          "nullable": true
        },
        "reserved_base_funds": {
          "type": "string",
          "description": "Sum of reserved in active deals funds in BASE",
          "example": "13.6382",
          "nullable": true
        }
      },
      "additionalProperties": false
    },
    "SmartTradeV2Entity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "version": {
          "type": "integer"
        },
        "account": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "market": {
              "type": "string"
            },
            "link": {
              "type": "string"
            }
          }
        },
        "pair": {
          "type": "string"
        },
        "instant": {
          "type": "boolean"
        },
        "status": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          }
        },
        "leverage": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "type": {
              "type": "string"
            },
            "value": {
              "type": "integer"
            }
          }
        },
        "position": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "editable": {
              "type": "boolean"
            },
            "units": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "example": 1231.11,
                  "nullable": true
                },
                "editable": {
                  "type": "boolean"
                }
              }
            },
            "price": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "example": 1223.32,
                  "nullable": true
                },
                "value_without_commission": {
                  "type": "number",
                  "example": 500.2,
                  "nullable": true
                },
                "editable": {
                  "type": "boolean"
                }
              }
            },
            "total": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "example": 100.2,
                  "nullable": true
                }
              }
            },
            "order_type": {
              "type": "string"
            },
            "status": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        },
        "take_profit": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "steps": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TakeProfitStep"
              }
            }
          }
        },
        "stop_loss": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        },
        "reduce_funds": {
          "type": "object",
          "properties": {
            "steps": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReduceFundsStep"
              }
            }
          }
        },
        "market_close": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "status": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "basic_type": {
                  "type": "string"
                }
              }
            },
            "units": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            },
            "price": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "value_without_commission": {
                  "type": "string"
                }
              }
            },
            "total": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            },
            "filled": {
              "type": "object",
              "properties": {
                "units": {
                  "type": "string"
                },
                "total": {
                  "type": "string"
                },
                "price": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        },
        "note": {
          "type": "string"
        },
        "note_raw": {
          "type": "string",
          "nullable": true
        },
        "skip_enter_step": {
          "type": "boolean"
        },
        "data": {
          "type": "object",
          "properties": {
            "editable": {
              "type": "boolean"
            },
            "current_price": {
              "type": "object",
              "properties": {
                "quote_volume": {
                  "type": "string"
                },
                "last": {
                  "type": "string"
                }
              }
            },
            "target_price_type": {
              "type": "string"
            },
            "base_order_finished": {
              "type": "boolean"
            },
            "missing_funds_to_close": {
              "type": "number"
            },
            "liquidation_price": {
              "type": "number",
              "example": 1000.22,
              "nullable": true
            },
            "average_enter_price": {
              "type": "number",
              "example": 60.2,
              "nullable": true
            },
            "average_close_price": {
              "type": "number",
              "example": 60.2,
              "nullable": true
            },
            "average_enter_price_without_commission": {
              "type": "number",
              "example": 100.3,
              "nullable": true
            },
            "average_close_price_without_commission": {
              "type": "number",
              "example": 40.2,
              "nullable": true
            },
            "panic_sell_available": {
              "type": "boolean"
            },
            "add_funds_available": {
              "type": "boolean"
            },
            "force_start_available": {
              "type": "boolean"
            },
            "force_process_available": {
              "type": "boolean"
            },
            "cancel_available": {
              "type": "boolean"
            },
            "finished": {
              "type": "boolean"
            },
            "base_position_step_finished": {
              "type": "boolean"
            },
            "created_at": {
              "type": "string",
              "example": "2018-08-08 08:08:08"
            },
            "updated_at": {
              "type": "string",
              "example": "2018-08-08 08:08:08"
            },
            "closed_at": {
              "type": "string",
              "example": "2018-08-08 08:08:08"
            },
            "type": {
              "type": "string",
              "example": "smart_sell"
            }
          }
        },
        "profit": {
          "type": "object",
          "properties": {
            "volume": {
              "type": "number",
              "example": 14,
              "nullable": true
            },
            "usd": {
              "type": "number",
              "example": 12.22,
              "nullable": true
            },
            "percent": {
              "type": "number",
              "example": 12
            },
            "roe": {
              "type": "number",
              "nullable": true
            }
          }
        },
        "margin": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number",
              "example": 100.2,
              "nullable": true
            },
            "total": {
              "type": "number",
              "example": 700.2,
              "nullable": true
            }
          }
        },
        "is_position_not_filled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "TakeProfitStep": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "version": {
          "type": "integer"
        },
        "account": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "market": {
              "type": "string"
            },
            "link": {
              "type": "string"
            }
          }
        },
        "pair": {
          "type": "string"
        },
        "instant": {
          "type": "boolean"
        },
        "status": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          }
        },
        "leverage": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "type": {
              "type": "string"
            },
            "value": {
              "type": "integer"
            }
          }
        },
        "position": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "editable": {
              "type": "boolean"
            },
            "units": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "example": 1231.11,
                  "nullable": true
                },
                "editable": {
                  "type": "boolean"
                }
              }
            },
            "price": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "example": 1223.32,
                  "nullable": true
                },
                "value_without_commission": {
                  "type": "number",
                  "example": 500.2,
                  "nullable": true
                },
                "editable": {
                  "type": "boolean"
                }
              }
            },
            "total": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "example": 100.2,
                  "nullable": true
                }
              }
            },
            "order_type": {
              "type": "string"
            },
            "status": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        },
        "take_profit": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "steps": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TakeProfitStep"
              }
            }
          }
        },
        "stop_loss": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        },
        "note": {
          "type": "string"
        },
        "skip_enter_step": {
          "type": "boolean"
        },
        "data": {
          "type": "object",
          "properties": {
            "editable": {
              "type": "boolean"
            },
            "current_price": {
              "type": "object",
              "properties": {
                "quote_volume": {
                  "type": "string"
                },
                "last": {
                  "type": "string"
                }
              }
            },
            "target_price_type": {
              "type": "string"
            },
            "base_order_finished": {
              "type": "boolean"
            },
            "missing_funds_to_close": {
              "type": "number"
            },
            "liquidation_price": {
              "type": "number",
              "example": 1000.22,
              "nullable": true
            },
            "average_enter_price": {
              "type": "number",
              "example": 60.2,
              "nullable": true
            },
            "average_close_price": {
              "type": "number",
              "example": 60.2,
              "nullable": true
            },
            "average_enter_price_without_commission": {
              "type": "number",
              "example": 100.3,
              "nullable": true
            },
            "average_close_price_without_commission": {
              "type": "number",
              "example": 40.2,
              "nullable": true
            },
            "panic_sell_available": {
              "type": "boolean"
            },
            "add_funds_available": {
              "type": "boolean"
            },
            "force_start_available": {
              "type": "boolean"
            },
            "force_process_available": {
              "type": "boolean"
            },
            "cancel_available": {
              "type": "boolean"
            },
            "finished": {
              "type": "boolean"
            },
            "base_position_step_finished": {
              "type": "boolean"
            },
            "created_at": {
              "type": "string",
              "example": "2018-08-08 08:08:08"
            },
            "updated_at": {
              "type": "string",
              "example": "2018-08-08 08:08:08"
            },
            "closed_at": {
              "type": "string",
              "example": "2018-08-08 08:08:08"
            },
            "type": {
              "type": "string",
              "example": "smart_sell"
            }
          }
        },
        "profit": {
          "type": "object",
          "properties": {
            "volume": {
              "type": "number",
              "example": 14,
              "nullable": true
            },
            "usd": {
              "type": "number",
              "example": 12.22,
              "nullable": true
            },
            "percent": {
              "type": "number",
              "example": 12
            },
            "roe": {
              "type": "number",
              "nullable": true
            }
          }
        },
        "margin": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number",
              "example": 100.2,
              "nullable": true
            },
            "total": {
              "type": "number",
              "example": 700.2,
              "nullable": true
            }
          }
        },
        "is_position_not_filled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "BotDealsStatsEntity": {
      "type": "object",
      "properties": {
        "completed": {
          "type": "integer",
          "example": 0
        },
        "panic_sold": {
          "type": "integer",
          "example": 0
        },
        "active": {
          "type": "integer",
          "example": 0
        },
        "completed_deals_usd_profit": {
          "type": "string",
          "example": "5000.0"
        },
        "from_currency_is_dollars": {
          "type": "boolean",
          "example": false
        },
        "completed_deals_btc_profit": {
          "type": "string",
          "example": "0.5"
        },
        "funds_locked_in_active_deals": {
          "type": "string",
          "example": "0.0"
        },
        "btc_funds_locked_in_active_deals": {
          "type": "string",
          "example": "0.0"
        },
        "active_deals_usd_profit": {
          "type": "string",
          "example": "0.0"
        },
        "active_deals_btc_profit": {
          "type": "string",
          "example": "0.0"
        }
      },
      "additionalProperties": false
    },
    "SystemSetting": {
      "type": "object",
      "properties": {
        "new_referral_terms_start_date": {
          "type": "string"
        },
        "new_referral_terms_end_date": {
          "type": "string"
        },
        "required": [
          "new_referral_terms_start_date",
          "new_referral_terms_end_date"
        ]
      },
      "additionalProperties": false
    },
    "SmartBotV1": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "source": {
          "type": "string",
          "enum": [
            "mlqfl",
            "qfl",
            "ml",
            "algo"
          ]
        },
        "enable_emergency_brake": {
          "type": "boolean"
        },
        "enable_stop_loss": {
          "type": "boolean"
        },
        "quote_currency": {
          "type": "string"
        },
        "quote_volume": {
          "type": "string"
        },
        "profit_quote": {
          "type": "string"
        },
        "have_any_completed_trades": {
          "type": "boolean"
        },
        "strategy": {
          "type": "string",
          "enum": [
            "conservative",
            "moderate",
            "aggressive"
          ]
        },
        "account": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "exchange_code": {
              "type": "string"
            },
            "exchange_name": {
              "type": "string"
            }
          }
        },
        "warnings": {
          "type": "array"
        },
        "active_trades": {
          "type": "object",
          "properties": {
            "quote_volume": {
              "type": "string"
            },
            "profit_quote": {
              "type": "string"
            },
            "profit_percent": {
              "type": "string"
            }
          }
        }
      }
    },
    "LooseAccountEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "New Loose Account"
        },
        "created_at": {
          "type": "string",
          "example": "2021-07-08 08:08:08"
        },
        "updated_at": {
          "type": "string",
          "example": "2021-08-09 09:09:09"
        },
        "type": {
          "type": "string",
          "example": "Accounts::LooseAccount"
        },
        "is_deleted": {
          "type": "boolean",
          "example": false
        },
        "is_locked": {
          "type": "boolean",
          "example": false
        }
      },
      "additionalProperties": false
    },
    "422": {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        },
        "error_attributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GridBotEvent": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Bot Message"
        },
        "created_at": {
          "type": "string",
          "example": "2021-07-08 08:08:08"
        }
      },
      "additionalProperties": false
    },
    "ReduceFundsStep": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "basic_type": {
              "type": "string"
            }
          }
        },
        "units": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            }
          }
        },
        "price": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "value_without_commission": {
              "type": "string"
            }
          }
        },
        "total": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            }
          }
        },
        "filled": {
          "type": "object",
          "properties": {
            "units": {
              "type": "string"
            },
            "total": {
              "type": "string"
            },
            "price": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          }
        },
        "data": {
          "type": "object",
          "properties": {
            "cancelable": {
              "type": "boolean"
            },
            "panic_sell_available": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "HodlBotV1": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "account_name": {
          "type": "string"
        },
        "exchange_code": {
          "type": "string"
        },
        "buy_interval_days": {
          "type": "integer",
          "min": 1,
          "max": 30
        },
        "next_buy_date_timestamp": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "base_currency": {
          "type": "string"
        },
        "quote_currency": {
          "type": "string"
        },
        "volume": {
          "type": "string"
        },
        "profit": {
          "type": "string"
        },
        "profit_percentage": {
          "type": "string"
        },
        "average_buy_price": {
          "type": "string"
        },
        "bought_coin_market_value": {
          "type": "string"
        },
        "is_enabled": {
          "type": "boolean"
        },
        "warning": {
          "type": "string",
          "nullable": true
        }
      }
    }
  }
}
